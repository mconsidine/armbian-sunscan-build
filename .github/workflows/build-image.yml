name: Builds the Sunscan OS image with Armbian

on:
  #pull_request:
  #push:
  #  tags:
  #    - '*.*.*'
  #  branches:
  #    - main
  workflow_dispatch:
    tags:
      - '*.*.*'
    branches:
      - main
      
jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v4
      #  with:
      #    platforms: all

      #- name: Set up Docker Buildx
      #  uses: docker/setup-buildx-action@v4
    
      - name: Determine version
        id: vars
        run: |
          # Get the tag, if any
          TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")
          
          if [ -n "$TAG" ]; then
            echo "APP_VERSION=$TAG" >> $GITHUB_ENV
            echo "IMGFILENAME=sunscan_os_$TAG" >> $GITHUB_ENV
          else
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
            COMMIT=$(git rev-parse --short HEAD)
            echo "APP_VERSION=${BRANCH}_${COMMIT}" >> $GITHUB_ENV
            echo "IMGFILENAME=sunscan_os_${BRANCH}_${COMMIT}" >> $GITHUB_ENV
          fi

      #- name: Prep gen-sunscan
      #  run: |
      #    {
      #    mkdir -p pi-gen-sunscan/01-prepare-repo
      #    cat > pi-gen-sunscan/01-prepare-repo/00-run.sh <<-EOF
      #    #!/bin/bash
      #    git clone ${{ github.server_url }}/${{ github.repository }}.git --branch ${{ github.head_ref }} --depth 1 \${WORK_DIR}/tmp/repo
      #    
      #    EOF
      #    } &&
      #    chmod +x pi-gen-sunscan/01-prepare-repo/00-run.sh
          
      #- name: Create install script for packages
      #  run: |
      #    cat << 'EOF' > ./pi-gen-sunscan/00-install/install_scripts.sh
      #    #!/bin/bash

      #    # Path to the 00-packages file
      #    PACKAGES_FILE="./00-packages"

      #    # Check if the packages file exists
      #    if [ ! -f "$PACKAGES_FILE" ]; then
      #      echo "Packages file not found: $PACKAGES_FILE"
      #      exit 1
      #    fi

      #    # Read the packages file and install each package
      #    while IFS= read -r package; do
      #      if [ -n "$package" ]; then
      #        echo "Installing package: $package"
      #        sudo apt-get install -y "$package"
      #      fi
      #    done < "$PACKAGES_FILE"
          
      #    EOF

      #- name: Make install_packages.sh executable
      #  run: chmod +x ./pi-gen-sunscan/00-install/install_packages.sh

      #- name: Install packages from 00-packages
      #  run: ./pi-gen-sunscan/00-install/install_packages.sh

      #- uses: usimd/pi-gen-action@v1
      #  id: build
      #  with:
      #    compression: xz

      #    # Compression level to be used. From 0 to 9 (refer to the tool man page for more
      #    # information on this. Usually 0 is no compression but very fast, up to 9 with the
      #    # best compression but very slow).
      #    compression-level: 6

      #    # Enable SSH access to Pi.
      #    enable-ssh: 1

      #    export-last-stage-only: true

      #    # Comma or whitespace separated list of additional packages to install on host
      #    # before running pi-gen. Use this list to add any packages your custom stages may
      #    # require. Note that this is not affecting the final image. In order to add
      #    # additional packages, you need to add a respective 'XX-packages' file in your
      #    # custom stage.
      #    extra-host-dependencies: ''

      #    # Comma or whitespace separated list of additional modules to load on host before
      #    # running pi-gen. If your custom stage requires additional software or kernel
      #    # modules to be loaded, add them here. Note that this is not meant to configure
      #    # modules to be loaded in the target image.
      #    extra-host-modules: ''

      #    # Token to use for checking out pi-gen repo.
      #    github-token: ${{ github.token }}

      #    # Host name of the image.
      #    hostname: sunscan

      #    # Final image name.
      #    image-name: ${{ env.IMGFILENAME }}

      #    # Enabling this option will remove plenty of components from the GitHub Actions
      #    # runner that are not mandatory pre-requisites for a (vanilla) pi-gen build. This
      #    # shall increase the available disk space so that also large images can be
      #    # compiled on a free GHA runner (benchmark is the full image including a desktop
      #    # environment). If any packages are missing during the build consider adding them
      #    # to the `extra-host-dependencies` list.
      #    increase-runner-disk-size: false

      #    # Default keyboard keymap.
      #    keyboard-keymap: us

      #    # Default keyboard layout.
      #    keyboard-layout: English (US)

      #    # Default locale of the system image.
      #    locale: en_US.UTF-8

      #    # Password of the intial user account, locked if empty.
      #    password: 'sunscan'

      #    # Path where selected pi-gen ref will be checked out to. If the path does not yet
      #    # exist, it will be created (including its parents).
      #    pi-gen-dir: pi-gen

      #    # The release name to use in `/etc/issue.txt`. The default should only be used for
      #    # official Raspberry Pi builds.
      #    pi-gen-release: Raspberry Pi reference

      #    # GitHub repository to fetch pi-gen from, must be a fork from RPi-Distro/pi-gen.
      #    pi-gen-repository: RPi-Distro/pi-gen

      #    # Release version of pi-gen to use. This can both be a branch or tag name known in
      #    # the pi-gen repository.
      #    pi-gen-version: arm64

      #    # Setting to `1` will disable password authentication for SSH and enable public
      #    # key authentication. Note that if SSH is not enabled this will take effect when
      #    # SSH becomes enabled.
      #    pubkey-only-ssh: 0

      #    # The release version to build images against. Valid values are jessie, stretch,
      #    # buster, bullseye, bookworm, and testing.
      #    release: bookworm

      #    # List of stage name to execute in given order. Relative and absolute paths to
      #    # custom stage directories are allowed here. Note that by default pi-gen exports
      #    # images in stage2 (lite), stage4 and stage5. You probably want to hook in custom
      #    # stages before one of the exported stages. Otherwise, the action will make sure
      #    # any custom stage will include an image export directive.
      #    stage-list: stage0 stage1 stage2 ./pi-gen-sunscan

      #    # System timezone.
      #    timezone: Europe/Paris

      #    # Name of the initial user account.
      #    username: admin

      #    # Print all output from pi-gen.
      #    verbose-output: true
      
      - name: Clone Armbian build repository
        run: |
          git clone --depth 1 https://github.com/armbian/build.git

      - name: Set up prepare-repo script
        run: |
          mkdir -p ./pi-gen-sunscan/01-prepare-repo
          cat << 'EOF' > ./pi-gen-sunscan/01-prepare-repo/00-run.sh         
          #!/bin/bash
          git clone ${{ github.server_url }}/${{ github.repository }}.git --branch ${{ github.head_ref }} --depth 1 \${WORK_DIR}/tmp/repo
          
          EOF
          
      - name: Set up install packages script
        run: |
          cat << 'EOF' > ./pi-gen-sunscan/00-install/install-packages.sh
          #!/bin/bash

          # Path to the 00-packages file
          PACKAGES_FILE="./00-packages"

          # Check if the packages file exists
          if [ ! -f "$PACKAGES_FILE" ]; then
            echo "Packages file not found: $PACKAGES_FILE"
            exit 1
          fi

          # Read the packages file and install each package
          while IFS= read -r package; do
            if [ -n "$package" ]; then
              echo "Installing package: $package"
              sudo apt-get install -y "$package"
            fi
          done < "$PACKAGES_FILE"
          
          EOF

      - name: Set up folders and scripts in userpatches for customize image script to use
        run: |
          cd ./build
          mkdir -p ./userpatches

          # Create overlay directory and copy scripts
          #TODO: can overlay have subfolders??
          #TODO: this should be automated to loop through pi-gen-sunscan
          mkdir -p ./userpatches/overlay/
          cp ../pi-gen-sunscan/prerun.sh ./userpatches/overlay/prerun.sh
          cp ../pi-gen-sunscan/00-install/00-packages ./userpatches/overlay/00-packages
          cp ../pi-gen-sunscan/00-install/install-packages.sh ./userpatches/overlay/install-packages.sh
          cp ../pi-gen-sunscan/01-prepare-repo/00-run.sh ./userpatches/overlay/00-run.sh
          cp ../pi-gen-sunscan/02-copy-app/00-run.sh ./userpatches/overlay/01-run.sh
          cp ../pi-gen-sunscan/03-inti/00-run-chroot.sh  ./userpatches/overlay/00-run_chroot.sh
          cp ../pi-gen-sunscan/04-system/00-run-chroot.sh  ./userpatches/overlay/01-run-chroot.sh
          cp ../pi-gen-sunscan/04-system/01-run-chroot.sh  ./userpatches/overlay/02-run-chroot.sh
          cp ../pi-gen-sunscan/04-system/02-run-chroot.sh  ./userpatches/overlay/03-run-chroot.sh
          cp ../pi-gen-sunscan/04-system/03-run-chroot.sh  ./userpatches/overlay/04-run-chroot.sh
                    
          #Create script to customize OS build
          cat << 'EOF' > ./userpatches/customize-image.sh
          #!/bin/bash
          
          # Set timezone
          echo "Setting timezone to America/New_York..."
          echo "America/New_York" > /etc/timezone
          ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime

          # Set locale
          echo "Setting locale to en_US.UTF-8..."
          sed -i 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
          locale-gen
          update-locale LANG=en_US.UTF-8

          # Enable SSH
          echo "Enabling SSH..."
          systemctl enable ssh
          systemctl start ssh

          # Set hostname
          echo "Setting hostname to sunscan-armbian..."
          echo "sunscan-armbian" > /etc/hostname
          sed -i 's/127.0.1.1.*/127.0.1.1\tsunscan-armbian/' /etc/hosts

          # Create an initial user
          USERNAME="admin"
          PASSWORD="sunscan"  # Change to a secure password
          echo "Creating initial user $USERNAME..."
          useradd -m -s /bin/bash $USERNAME
          echo "$USERNAME:$PASSWORD" | chpasswd
          usermod -aG sudo $USERNAME

          # Debug output
          set -x
        
          # Make our custom scripts executable and run them in sequence
          #TODO: can overlay have subfolders?
          #TODO: this should be a loop
          chmod +x /tmp/overlay/prerun.sh
          chmod +x /tmp/overlay/install-packages.sh
          chmod +x /tmp/overlay/00-run.sh          
          chmod +x /tmp/overlay/01-run.sh
          chmod +x /tmp/overlay/00-run-chroot.sh
          chmod +x /tmp/overlay/01-run-chroot.sh
          chmod +x /tmp/overlay/02-run-chroot.sh
          chmod +x /tmp/overlay/03-run-chroot.sh
          chmod +x /tmp/overlay/04-run-chroot.sh
          
          # Execute scripts in order
          #TODO: can overlay have subfolders?          
          #TODO: this should be a loop
          /tmp/overlay/prerun.sh
          /tmp/overlay/install-packages.sh
          /tmp/overlay/00-run.sh          
          /tmp/overlay/01-run.sh
          /tmp/overlay/00-run-chroot.sh
          /tmp/overlay/01-run-chroot.sh
          /tmp/overlay/02-run-chroot.sh
          /tmp/overlay/03-run-chroot.sh
          /tmp/overlay/04-run-chroot.sh
        
          # Debug output
          set +x

          echo "Customizations applied successfully."
          EOF          

          chmod +x ./userpatches/customize-image.sh  
          ls -lha ./userpatches/customize-image.sh

      #- name: Stages
      #  run: |
      #    echo "0"
      #    #this has prerun.sh in it as well :
      #    ls -lha ./pi-gen-sunscan
      #    echo "1"
      #    ls -lha ./pi-gen-sunscan/00-install
      #    echo "3"
      #    ls -lha ./pi-gen-sunscan/01-prepare-repo
      #    echo "4"
      #    ls -lha ./pi-gen-sunscan/02-copy-app
      #    echo "5"
      #    ls -lha ./pi-gen-sunscan/03-inti
      #    echo "7"
      #    ls -lha ./pi-gen-sunscan/04-system
      #    echo "9"
      #    ls -lha ./pi-gen-sunscan/01-prepare-repo
      #    echo "11"
      #    ls -lha ./build
      #    echo "THAT SHOULD BE BUILD"
      #    #{
      #    #cat > ./userpatches/customize-image.sh <<-EOF
      #    ##!/bin/bash
      #    #ls -lha
      #    #sudo ./pi-gen-sunscan/prerun.sh
      #    #echo "WE ARE HERE
      #    #cat ./pi-gen-sunscan/00-install/00-packages
      #    #xargs sudo apt-get -y install < ./pi-gen-sunscan/00-install/00-packages
      #    #echo "WE ARE HERE TOO"
      #    #sudo ./pi-gen-sunscan/01-prepare-repo/00_run.sh
      #    #sudo ./pi-gen-sunscan/02-copy-app/00_run.sh
      #    #sudo ./pi-gen-sunscan/03-inti/00_run-chroot.sh         
      #    #sudo ./pi-gen-sunscan/04-system/00_run-chroot.sh             
      #    #sudo ./pi-gen-sunscan/04-system/01_run-chroot.sh             
      #    #sudo ./pi-gen-sunscan/04-system/02_run-chroot.sh             
      #    #sudo ./pi-gen-sunscan/04-system/03_run-chroot.sh                       
      #    #EOF
      #    #} &&
      #    #chmod +x ./userpatches/customize-image.sh   
      #    #ls -lha ./userpatches/customize-image.sh
      #    echo "12"
          
      - name: Configure build
        id: build
        run: |
          cd ./build
          ./compile.sh EXPERT=yes \
            BOARD=rockpi-4bplus \
            BRANCH=current \
            RELEASE=bookworm \
            BUILD_MINIMAL=yes \
            BUILD_DESKTOP=no \
            KERNEL_CONFIGURE=no \
            COMPRESS_OUTPUTIMAGE=xz \
            IMAGE_XZ_COMPRESSION_RATIO=6 \
            INCLUDE_HOME_DIR=yes \
            USE_CUSTOM_OVERLAY=yes
          
      - name: Check file structure
        run: |
          echo "listing of .build/"        
          ls -lha ./build
          echo "listing of .build/output/"          
          ls -lha ./build/output
          echo "listing of .build/output/images/"
          ls -lha ./build/output/images
          echo "listing of .build/output/images/*.xz"
          ls -lha ./build/output/images/*.xz
          echo ${{ env.IMGFILENAME }}

      - name: Get current date
        id: date
        run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMGFILENAME }}-${{ env.DATE }}
          #path: ${{ steps.build.outputs.image-path }}
          path: ./build/output/images/*.xz
          retention-days: 5
          
      #- name: Release
      #  uses: softprops/action-gh-release@v2
      #  if: startsWith(github.ref, 'refs/tags/')
      #  with:
      #      files: ${{ steps.build.outputs.image-path }}

      #- name: Cleanup
      #  if: always()
      #  run: |
      #    sudo rm -rf armbian-build
      #    df -h      
