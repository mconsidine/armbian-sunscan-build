name: Builds the Sunscan OS image with Armbian

on:
  #pull_request:
  #push:
  #  tags:
  #    - '*.*.*'
  #  branches:
  #    - main
  workflow_dispatch:
    tags:
      - '*.*.*'
    branches:
      - main
      
jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Determine version
        id: vars
        run: |
          # Get the tag, if any
          TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")
          
          if [ -n "$TAG" ]; then
            echo "APP_VERSION=$TAG" >> $GITHUB_ENV
            echo "IMGFILENAME=sunscan_os_$TAG" >> $GITHUB_ENV
          else
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
            COMMIT=$(git rev-parse --short HEAD)
            echo "APP_VERSION=${BRANCH}_${COMMIT}" >> $GITHUB_ENV
            echo "IMGFILENAME=sunscan_os_${BRANCH}_${COMMIT}" >> $GITHUB_ENV
          fi

        
      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git \
            curl \
            unzip \
            wget \
            xz-utils

      - name: Install dependencies
        run: |
          sudo apt-get install -y \
            gcc \
            g++ \
            make \
            bc \
            bison \
            flex \
            libssl-dev \
            libncurses5-dev \
            libncursesw5-dev \
            qemu-user-static \
            debootstrap \
            binfmt-support \
            build-essential \
            u-boot-tools \
            device-tree-compiler

      - name: Clone Armbian build repository
        run: |
          git clone --depth 1 https://github.com/armbian/build.git

      - name: Set up prepare-repo script
        run: |
          mkdir -p ./pi-gen-sunscan/01-prepare-repo
          cat << 'EOF' > ./pi-gen-sunscan/01-prepare-repo/00-run.sh
          #cat > ./pi-gen-sunscan/01-prepare-repo/00-run.sh <<-EOF        
          #!/bin/bash
          git clone ${{ github.server_url }}/${{ github.repository }}.git --branch ${{ github.head_ref }} --depth 1 \${WORK_DIR}/tmp/repo
          EOF
          
      - name: Set up install packages script
        run: |
          cat << 'EOF' > ./pi-gen-sunscan/00-install/install-packages.sh
          #cat > ./pi-gen-sunscan/00-install/install-packages.sh <<-EOF          
          #!/bin/bash

          # Path to the 00-packages file
          PACKAGES_FILE="./00-packages"
          ls -lha ./
          echo "WERE NOW HERE"
          # Check if the packages file exists
          if [ ! -f "$PACKAGES_FILE" ]; then
            echo "Packages file not found: $PACKAGES_FILE"
            exit 1
          fi

          # Read the packages file and install each package
          while IFS= read -r package; do
            if [ -n "$package" ]; then
              echo "Installing package: $package"
              sudo apt-get install -y "$package"
            fi
          done < "$PACKAGES_FILE"
          EOF

      - name: Set up folders and scripts in userpatches for customize image script to use
        run: |
          cd ./build
          mkdir -p ./userpatches

          ## Create overlay directory and copy scripts
          ##TODO: can overlay have subfolders??
          ##TODO: this should be automated to loop through pi-gen-sunscan
          #mkdir -p ./userpatches/overlay/
          #mkdir -p ./userpatches/overlay/repo/
          
          #cp -a ../system ./userpatches/overlay/repo/
          #cp -a ../app ./userpatches/overlay/repo/          
          #cp -a ../webapp ./userpatches/overlay/repo/
          #cp -a ../package_backend.py ./userpatches/overlay/repo/
          #cp -a ../reset_hotspot.sh ./userpatches/overlay/repo/
          #cp -a ../sunscan_backend_source.zip ./userpatches/overlay/repo/

          ###cp -a ../pi-gen-sunscan/prerun.sh .
          ###chmod +x prerun.sh
          ###./prerun.sh
          ###rm prerun.sh

          cp -a ../pi-gen-sunscan/00-install/00-packages .
          cp -a ../pi-gen-sunscan/00-install/install-packages.sh .          
          chmod +x install-packages.sh
          ./install-packages.sh
          rm install-packages.sh

          #cp -a ../pi-gen-sunscan/01-prepare-repo/00-run.sh .          
          #chmod +x 00-run.sh
          #./00-run.sh
          #rm 00-run.sh
          git clone https://github.com/mconsidine/armbian-sunscan-build.git --branch main --depth 1 ./tmp/repo
          echo "THIS IS ./tmp/repo :" 
          ls -lha ./tmp/repo
          ls -lha /tmp/repo
          echo "START OF APP INSTALL"
          ls -lha
          cp -a ../pi-gen-sunscan/02-copy-app/00-run.sh . 
          ls -lha
          chmod +x 00-run.sh
          sudo ./00-run.sh
          rm 00-run.sh

          ls -lha ./tmp/repo
          echo "IS APP SHOWN?"

          cp -a ../pi-gen-sunscan/03-inti/00-run-chroot.sh .          
          chmod +x 00-run-chroot.sh
          ./00-run-chroot.sh
          rm 00-run-chroot.sh

          cp -a ../pi-gen-sunscan/04-system/00-run-chroot.sh .          
          chmod +x 00-run-chroot.sh
          ./00-run-chroot.sh
          rm 00-run-chroot.sh

          cp -a ../pi-gen-sunscan/04-system/01-run-chroot.sh .          
          chmod +x 01-run-chroot.sh
          ./01-run-chroot.sh
          rm 01-run-chroot.sh
          
          cp -a ../pi-gen-sunscan/04-system/02-run-chroot.sh .          
          chmod +x 02-run-chroot.sh
          ./02-run-chroot.sh
          rm 02-run-chroot.sh

          cp -a ../pi-gen-sunscan/04-system/03-run-chroot.sh .          
          chmod +x 03-run-chroot.sh
          ./03-run-chroot.sh
          rm 03-run-chroot.sh

          # Make our custom scripts executable
          #TODO: can overlay have subfolders?
          #TODO: this should be a loop
          #ls -lha ../
          #echo "WHERE WE WERE"
          #ls -lha ./
          #echo "WHERE WE ARE"
          #ls -lha ./userpatches/overlay/
          #chmod +x ./userpatches/overlay/prerun.sh
          #chmod +x ./userpatches/overlay/install-packages.sh
          #chmod +x ./userpatches/overlay/00-run.sh          
          #chmod +x ./userpatches/overlay/01-run.sh
          #chmod +x ./userpatches/overlay/00-run-chroot.sh
          #chmod +x ./userpatches/overlay/01-run-chroot.sh
          #chmod +x ./userpatches/overlay/02-run-chroot.sh
          #chmod +x ./userpatches/overlay/03-run-chroot.sh
          #chmod +x ./userpatches/overlay/04-run-chroot.sh

      - name: Create script to customize OS build
        run: |
          ls -lha ./
          echo "FIRST HERE"
          cd ./build
          ls -lha ./
          echo "THEN HERE"
          cat << 'EOF' > ./userpatches/customize-image.sh
          #cat > ./userpatches/customize-image.sh <<-EOF
          #!/bin/bash
          
          # Set timezone
          echo "Setting timezone to America/New_York..."
          echo "America/New_York" > /etc/timezone
          ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime

          # Set locale
          echo "Setting locale to en_US.UTF-8..."
          sed -i 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
          locale-gen
          update-locale LANG=en_US.UTF-8

          # Enable SSH
          echo "Enabling SSH..."
          systemctl enable ssh
          systemctl start ssh

          # Set hostname
          echo "Setting hostname to sunscan-armbian..."
          echo "sunscan-armbian" > /etc/hostname
          sed -i 's/127.0.1.1.*/127.0.1.1\tsunscan-armbian/' /etc/hosts

          ## Create an initial user
          #USERNAME="admin"
          #PASSWORD="sunscan"  # Change to a secure password
          #echo "Creating initial user $USERNAME..."
          #useradd -m -s /bin/bash $USERNAME
          #echo "$USERNAME:$PASSWORD" | chpasswd
          #usermod -aG sudo $USERNAME

          echo "Customizations applied successfully."
          
          EOF

      #- name: Stages
      #  run: |
      #    echo "0"
      #    #this has prerun.sh in it as well :
      #    ls -lha ./pi-gen-sunscan
      #    echo "1"
      #    ls -lha ./pi-gen-sunscan/00-install
      #    echo "3"
      #    ls -lha ./pi-gen-sunscan/01-prepare-repo
      #    echo "4"
      #    ls -lha ./pi-gen-sunscan/02-copy-app
      #    echo "5"
      #    ls -lha ./pi-gen-sunscan/03-inti
      #    echo "7"
      #    ls -lha ./pi-gen-sunscan/04-system
      #    echo "9"
      #    ls -lha ./pi-gen-sunscan/01-prepare-repo
      #    echo "11"
      #    ls -lha ./build
      #    echo "THAT SHOULD BE BUILD"
      #    #{
      #    #cat > ./userpatches/customize-image.sh <<-EOF
      #    ##!/bin/bash
      #    #ls -lha
      #    #sudo ./pi-gen-sunscan/prerun.sh
      #    #echo "WE ARE HERE
      #    #cat ./pi-gen-sunscan/00-install/00-packages
      #    #xargs sudo apt-get -y install < ./pi-gen-sunscan/00-install/00-packages
      #    #echo "WE ARE HERE TOO"
      #    #sudo ./pi-gen-sunscan/01-prepare-repo/00_run.sh
      #    #sudo ./pi-gen-sunscan/02-copy-app/00_run.sh
      #    #sudo ./pi-gen-sunscan/03-inti/00_run-chroot.sh         
      #    #sudo ./pi-gen-sunscan/04-system/00_run-chroot.sh             
      #    #sudo ./pi-gen-sunscan/04-system/01_run-chroot.sh             
      #    #sudo ./pi-gen-sunscan/04-system/02_run-chroot.sh             
      #    #sudo ./pi-gen-sunscan/04-system/03_run-chroot.sh                       
      #    #EOF
      #    #} &&
      #    #chmod +x ./userpatches/customize-image.sh   
      #    #ls -lha ./userpatches/customize-image.sh
      #    echo "12"
          
      - name: Configure build
        id: build
        run: |
          cd ./build
          ./compile.sh EXPERT=yes \
            BOARD=rockpi-4bplus \
            BRANCH=current \
            RELEASE=bookworm \
            BUILD_MINIMAL=yes \
            BUILD_DESKTOP=yes \
            KERNEL_CONFIGURE=no \
            COMPRESS_OUTPUTIMAGE=xz \
            IMAGE_XZ_COMPRESSION_RATIO=6 \
            INCLUDE_HOME_DIR=yes \
            USE_CUSTOM_OVERLAY=yes
          
      - name: Check file structure
        run: |
          echo "listing of .build/"        
          ls -lha ./build
          echo "listing of .build/output/"          
          ls -lha ./build/output
          echo "listing of .build/output/images/"
          ls -lha ./build/output/images
          echo "listing of .build/output/images/*.xz"
          ls -lha ./build/output/images/*.xz
          echo ${{ env.IMGFILENAME }}

      - name: Get current date
        id: date
        run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMGFILENAME }}-${{ env.DATE }}
          #path: ${{ steps.build.outputs.image-path }}
          path: ./build/output/images/*.xz
          retention-days: 5
          
      #- name: Release
      #  uses: softprops/action-gh-release@v2
      #  if: startsWith(github.ref, 'refs/tags/')
      #  with:
      #      files: ${{ steps.build.outputs.image-path }}

      #- name: Cleanup
      #  if: always()
      #  run: |
      #    sudo rm -rf armbian-build
      #    df -h      
