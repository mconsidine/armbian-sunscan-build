name: Build Armbian for RockPi-4B+

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build-armbian:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get SunScan setup
        run: |
          {
          mkdir -p pi-gen-sunscan/01-prepare-repo
          cat > pi-gen-sunscan/01-prepare-repo/00-run.sh <<-EOF
          #!/bin/bash
          git clone ${{ github.server_url }}/${{ github.repository }}.git --branch ${{ github.head_ref }} --depth 1 \${WORK_DIR}/tmp/repo
          EOF
          } &&
          chmod +x pi-gen-sunscan/01-prepare-repo/00-run.sh

      - name: Set up install packages script
        run: |
          mkdir -p pi-gen-sunscan/00-install
          cat << 'EOF' > ./pi-gen-sunscan/00-install/install-packages.sh
          #cat > ./pi-gen-sunscan/00-install/install-packages.sh <<-EOF          
          #!/bin/bash

          # Path to the 00-packages file
          PACKAGES_FILE="./00-packages"
          ls -lha ./
          echo "WERE NOW HERE"
          # Check if the packages file exists
          if [ ! -f "$PACKAGES_FILE" ]; then
            echo "Packages file not found: $PACKAGES_FILE"
            exit 1
          fi

          # Read the packages file and install each package
          while IFS= read -r package; do
            if [ -n "$package" ]; then
              echo "Installing package: $package"
              sudo apt-get install -y "$package"
            fi
          done < "$PACKAGES_FILE"
          EOF

      - name: Clone Armbian build repository
        run: |
          git clone --depth 1 https://github.com/armbian/build.git
          echo "AFTER CLONING..."
          ls -lha

      - name: Create customized userspaces and overlay scripts
        run: |
          echo "THIS SHOULD BE BUILD LEVEL"
          ls -lha build
          
      - name: Copy user patches
        run: |
          mkdir -p build/userpatches/overlay
          rsync -av pi-gen-sunscan/ build/userpatches/overlay
          ls -lha
          ls -lha build
          ls -lha build/userpatches
          ls -lha build/userpatches/overlay

      #- name: Configure build
      #  run: |
      #    cd build
      #    ./compile.sh EXPERT=yes \
      #      BOARD=rockpi-4bplus \
      #      BRANCH=current\
      #      RELEASE=bookworm \
      #      BUILD_MINIMAL=yes \
      #      KERNEL_CONFIGURE=no \
      #      USE_OVERLAYS=yes \
      #      COMPRESS_OUTPUTIMAGE=xz \
      #      IMAGE_XZ_COMPRESSION_RATIO=6

      #- name: Examine folder structure
      #  run: |
      #    cd ..
      #    echo "THIS SHOULD BE SOURCE LEVEL"
      #    ls -lha .
      #    export $MASTTCSOURCE_DIR=$PWD
      #    echo "THIS SHOULD BE BUILD LEVEL"
      #    ls -lha ./build
      #    export $ROOTFS_DIR="."
      #    export $WORK_DIR=$PWD
      #    echo "SOURCE_DIR ---> $MATTCSOURCE_DIR
      #    echo "ROOTFS_DIR ----> " $ROOTFS_DIR
      #    echo "WORK_DIR ----> " $WORK_DIR
          
      #- name: Upload Armbian image
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: armbian-image
      #    path: |
      #      ./output/images/
      #    #  ./output/images/${{ env.IMAGE_NAME }}*.img
      #    #  ./build/output/images/*.img
